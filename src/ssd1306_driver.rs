use anyhow::Ok;
/*
Self-build driver for SSD1306
Implements traits from interface front_display

Display content is written to framebuffer, which update-call sets pixels.

todo: configurable reset-pin
todo: expose interface to serial interface i2c / spi
todo: init process
todo: low-level pixel write
todo: custom fonts
todo: debug-trait: print framebuffer
todo: print i2c-data
optional: pub as self-contained library

*/
// Based on tutorial:https://www.instructables.com/Getting-Started-With-OLED-Displays/
use error_stack::{IntoReport, ResultExt};
use gpio_cdev::{Chip, LineRequestFlags};
use i2cdev::core::I2CDevice;
use i2cdev::linux::{LinuxI2CDevice, LinuxI2CError};
use std::{error::Error, fmt, path::Path, thread::sleep, time::Duration};
#[derive(Debug)]
pub struct Ssd1306DriverError;

impl fmt::Display for Ssd1306DriverError {
    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        fmt.write_str("I2C Device shows unusual behaviour")
    }
}

//impl Context for DataRingError {}
impl Error for Ssd1306DriverError {}

pub struct Ssd1306Driver {
    width: i32,
    height: i32,
    dev: LinuxI2CDevice,
    frame_buffer: [u8; 1023],
}

impl Ssd1306Driver {
    pub fn new(
        dev: u8,
        address: u16,
        width: i32,
        height: i32,
    ) -> error_stack::Result<Ssd1306Driver, Ssd1306DriverError> {
        let fb: [u8; 1023] = [0; 1023];

        std::result::Result::Ok(Ssd1306Driver {
            dev: LinuxI2CDevice::new(format!("/dev/i2c-{}", dev), address)
                .into_report()
                .change_context(Ssd1306DriverError)
                .attach_printable_lazy(|| {
                    format!(
                        "Device w/ address {} could not be created @ bus/dev/i2c-{}",
                        dev, address
                    )
                })?,
            frame_buffer: (fb),
            width: (width),
            height: (height),
        })
    }

    pub fn init(
        &self,
        gpiochip: &Path,
        gpioline: u32,
    ) -> error_stack::Result<(), Ssd1306DriverError> {
        let mut chip = Chip::new(gpiochip)
            .into_report()
            .change_context(Ssd1306DriverError)
            .attach_printable_lazy(|| {
                format!(
                    "Failed to intialize GPIO {}:{}",
                    gpiochip.display(),
                    gpioline
                )
            })?;

        let handle = chip
            .get_line(gpioline)
            .into_report()
            .change_context(Ssd1306DriverError)
            .attach_printable_lazy(|| format!("Unable to get handle to line {}!", gpioline))?
            .request(LineRequestFlags::OUTPUT, 1, "driveoutput")
            .into_report()
            .change_context(Ssd1306DriverError)
            .attach_printable_lazy(|| format!("Setting State of Reset-Pin failed!"))?;
        // Toggle RST to initialize display:
        handle.set_value(1).expect("Error while initial set of pin");
        sleep(Duration::from_millis(100));
        handle.set_value(0).expect("Error while resetting pin");
        sleep(Duration::from_millis(100));
        handle
            .set_value(1)
            .expect("Error while setting final pin state");
        std::result::Result::Ok(())
    }

    fn send_init_cmds(&mut self) -> error_stack::Result<(), Ssd1306DriverError> {
        self.dev
            .set_slave_address(0x3d)
            .into_report()
            .change_context(Ssd1306DriverError)
            .attach_printable_lazy(|| format!("Error while setting slave address {}", 0x3d))?;
        let values: [u8; 25] = [
            // 0x00 Command Stream
            0xAE, //Set display Off
            0xD5, //Set display clock divide ratio/oscillator frequency
            0x80, 0xA8, //Set multiplex ratio
            0x3F, // All pixels off
            0xD3, //Set display offset
            0x00, 0x40, //Set display start line
            0x8D, //Set charge pump
            0x14, //VCC generated by internal DC/DC circuit
            0xA1, //Set segment re-map
            0xC0, //Set COM output scan direction
            0xDA, //Set COM pins hardware configuration
            0x12, 0x81, //Set contrast control
            0xCF, 0xD9, //Set pre-changed period
            0xF1, 0xDB, //Set VCOMH Deselected level
            0x40, 0xA4, //Set entire display on/off
            0xA6, //Set normal display
            0x20, //Set memory address mode
            0x00, //Horizontal
            0xAF, // All pixels of
        ]; //Set display on
        self.dev
            .smbus_write_block_data(0x00, &values)
            .into_report()
            .change_context(Ssd1306DriverError)
            .attach_printable_lazy(|| {
                format!("I2C errored out during block write of InitCommands!")
            })?;
        std::result::Result::Ok(())
    }

    pub fn draw_pixel(
        &mut self,
        x: i32,
        y: i32,
        _on: bool,
    ) -> error_stack::Result<(), Ssd1306DriverError> {
        if (x < 0) || (x >= self.width) || (y < 0) || (y >= self.height) {
            //Check for boundaries
            Err(Ssd1306DriverError).into_report().attach_printable_lazy(||format!("Targeted pixel out of displays dimensions x={} y={}, but display only provides {}x{} pixel!",x,y,self.width,self.height))
        } else {
            self.frame_buffer[(x + (y / 8) * self.width) as usize] = 1 << (y % 8); //Store pixel in array
            std::result::Result::Ok(())
        }
    }

    pub fn refresh(&mut self) {
        let values: [u8; 4] = [
            0x00, //Command stream
            0x00, //Set lower column start address for page addressing mode
            0x10, //Set higher column start address for page addressing mode
            0x40, //Set display start line
        ];

        for mut q in 0..self.width * self.height / 8 {
            self.dev.smbus_write_byte(0x40); // Data stream
            for w in 0..16 {
                self.dev.smbus_write_byte(self.frame_buffer[q as usize]); //Transmit data to be displayed
                q += 1;
            }
            q -= 1;
        }
    }
}
